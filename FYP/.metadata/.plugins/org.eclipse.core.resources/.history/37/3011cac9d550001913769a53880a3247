package cnn.layers.neurons;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.DoubleStream;

import cnn.layers.fclayers.FLayer;

public class ClassNeuron extends Neuron {

	int vectorLength;
	String label;
	public double[] input;
	double[] output;
	double[] weights;
	double rc = 0;
	
	public void receiveInput(double inputs) {
		System.out.println("Error, should receive multiple inputs at class layer.");
	}
	
	public void receiveInput(double[] inputs) {
		input = inputs;
	}
	
	public double forward() {
		softmax();
		return Math.exp(rc);
	}
	
	/**
	 * Class neuron which produces a score output that said image belongs to a class
	 * @param l - class label
	 * @param exampleInput - Denotes how long the vector of weights should be 
	 */
	public ClassNeuron(String l, int n) {
		label = l;
		weights = new double[n];
		for (int i = 0; i < weights.length; i++) {
			weights[i] = Math.random();
		}
	}

	private void softmax() {
		for(int i = 0; i < input.length; i++) {
			output[i] = input[i] * weights[i];
			rc += output[i];
		}
	}
	
	private void flattenInputs() {	
		ArrayList<double[]> flatInput = new ArrayList<double[]>();
		for(int i = 0; i < input.size(); i++) {
			flatInput.add(Arrays.stream(input.get(i))
			        .flatMapToDouble(Arrays::stream)
			        .toArray());
		}
		flatInputs = flatInput.get(0);
		for(int i = 1; i < flatInput.size(); i++) {
			flatInputs = DoubleStream.concat(Arrays.stream(flatInputs), Arrays.stream(flatInput.get(i))).toArray();
		}
		
		mapFlat = new double[flatInputs.length][1];
		
	}
}
